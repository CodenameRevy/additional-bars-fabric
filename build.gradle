plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = 'Jitpack'
		url = 'https://jitpack.io'
	}
	maven {
		name = 'Shedaniel maven'
		url = "https://maven.shedaniel.me/"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation(files("libs/oxidizelib-${project.oxidizeLib}+fabric-mc1.17-dev.jar"))
	include(files("libs/oxidizelib-${project.oxidizeLib}+fabric-mc1.17-dev.jar"))

	/** READ! **/
	/* oxidizeLib isn't updated to latest Fabric API and causes a crash while launching.
	* To circumvent this, I've compiled oxidizeLib locally with updated APIs
	* code below should be uncommented only when oxidizeLib gets updated.
	* When that happens, comment code above.
	*
	* I keep an updated fork on my github, clone it, run ./gradlew build and take dev jar from build/libs
	* to this project in libs/ and update versioning in gradle.properties.
	* */

	//modApi "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei}"
	//implementation "com.github.Shnupbups:oxidizelib:${project.oxidizeLib}"
	//include "com.github.Shnupbups:oxidizelib:${project.oxidizeLib}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	//MC 17 uses Java 16
	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}
